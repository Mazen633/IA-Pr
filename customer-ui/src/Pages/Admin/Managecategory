import React, { useState, useEffect } from 'react';

const ManageCategory = () => {
  const [categories, setCategories] = useState([]);
  const [newCategory, setNewCategory] = useState('');
  const [editMode, setEditMode] = useState(false);
  const [currentCategory, setCurrentCategory] = useState(null);

  useEffect(() => {
    fetch('/api/categories')
      .then(res => res.json())
      .then(data => setCategories(data))
      .catch(err => console.error('Error fetching categories:', err));
  }, []);

  const handleAddOrUpdate = () => {
    if (!newCategory.trim()) return;

    if (editMode && currentCategory) {
      // Update category
      fetch(`/api/categories/${currentCategory.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newCategory })
      })
        .then(res => res.json())
        .then(updated => {
          const updatedList = categories.map(cat =>
            cat.id === updated.id ? updated : cat
          );
          setCategories(updatedList);
          resetForm();
        })
        .catch(err => console.error('Error updating category:', err));
    } else {
      // Create category
      fetch('/api/categories', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newCategory })
      })
        .then(res => res.json())
        .then(cat => {
          setCategories([...categories, cat]);
          resetForm();
        })
        .catch(err => console.error('Error creating category:', err));
    }
  };

  const handleDelete = (id) => {
    if (!window.confirm('Are you sure you want to delete this category?')) return;

    fetch(`/api/categories/${id}`, { method: 'DELETE' })
      .then(() => setCategories(categories.filter(cat => cat.id !== id)))
      .catch(err => console.error('Error deleting category:', err));
  };

  const handleEdit = (category) => {
    setNewCategory(category.name);
    setCurrentCategory(category);
    setEditMode(true);
  };

  const resetForm = () => {
    setNewCategory('');
    setCurrentCategory(null);
    setEditMode(false);
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Manage Food Categories</h1>

      <div className="mb-6">
        <input
          value={newCategory}
          onChange={e => setNewCategory(e.target.value)}
          placeholder="Category Name"
          className="border p-2 mr-2 rounded"
        />
        <button
          onClick={handleAddOrUpdate}
          className="bg-blue-600 text-white px-4 py-2 rounded mr-2"
        >
          {editMode ? 'Update' : 'Add'}
        </button>
        {editMode && (
          <button
            onClick={resetForm}
            className="bg-gray-500 text-white px-4 py-2 rounded"
          >
            Cancel
          </button>
        )}
      </div>

      <ul className="space-y-2">
        {categories.map(cat => (
          <li key={cat.id} className="flex justify-between items-center border p-3 rounded">
            <span>{cat.name}</span>
            <div>
              <button
                onClick={() => handleEdit(cat)}
                className="bg-yellow-500 text-white px-3 py-1 rounded mr-2"
              >
                Edit
              </button>
              <button
                onClick={() => handleDelete(cat.id)}
                className="bg-red-600 text-white px-3 py-1 rounded"
              >
                Delete
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ManageCategory;
